set(SWIG_JAVA_SIMBODY_INTERFACE_FILE 
    "${CMAKE_CURRENT_SOURCE_DIR}/swig/java_simbody.i")
set(SWIG_JAVA_SIMBODY_CXX_FILE 
    "${CMAKE_CURRENT_BINARY_DIR}/OpenSimJNI/java_simbody.cxx")
set(SWIG_JAVA_SIMBODY_H_FILE   
    "${CMAKE_CURRENT_BINARY_DIR}/OpenSimJNI/java_simbody.h")

set(SWIG_JAVA_COMMON_INTERFACE_FILE 
    "${CMAKE_CURRENT_SOURCE_DIR}/swig/java_common.i")
set(SWIG_JAVA_COMMON_CXX_FILE 
    "${CMAKE_CURRENT_BINARY_DIR}/OpenSimJNI/java_common.cxx")
set(SWIG_JAVA_COMMON_H_FILE   
    "${CMAKE_CURRENT_BINARY_DIR}/OpenSimJNI/java_common.h")

set(SWIG_JAVA_SIMULATION_INTERFACE_FILE 
    "${CMAKE_CURRENT_SOURCE_DIR}/swig/java_simulation.i")
set(SWIG_JAVA_SIMULATION_CXX_FILE 
    "${CMAKE_CURRENT_BINARY_DIR}/OpenSimJNI/java_simulation.cxx")
set(SWIG_JAVA_SIMULATION_H_FILE   
    "${CMAKE_CURRENT_BINARY_DIR}/OpenSimJNI/java_simulation.h")

set(SWIG_JAVA_ACTUATORS_INTERFACE_FILE 
    "${CMAKE_CURRENT_SOURCE_DIR}/swig/java_actuators.i")
set(SWIG_JAVA_ACTUATORS_CXX_FILE 
    "${CMAKE_CURRENT_BINARY_DIR}/OpenSimJNI/java_actuators.cxx")
set(SWIG_JAVA_ACTUATORS_H_FILE   
    "${CMAKE_CURRENT_BINARY_DIR}/OpenSimJNI/java_actuators.h")

set(SWIG_JAVA_EXAMPLECOMPONENTS_INTERFACE_FILE 
    "${CMAKE_CURRENT_SOURCE_DIR}/swig/java_examplecomponents.i")
set(SWIG_JAVA_EXAMPLECOMPONENTS_CXX_FILE 
    "${CMAKE_CURRENT_BINARY_DIR}/OpenSimJNI/java_examplecomponents.cxx")
set(SWIG_JAVA_EXAMPLECOMPONENTS_H_FILE   
    "${CMAKE_CURRENT_BINARY_DIR}/OpenSimJNI/java_examplecomponents.h")

set(OPENSIM_JAVA_WRAPPING_PACKAGE "org.opensim.modeling"
    CACHE STRING
    "The wrapping is built as the Java package specified in this variable.")

# Replace periods with slashes (to make a path).
# Syntax for find-replace:
# string(REGEX REPLACE <pattern> <replacement string>
#                      <target variable> <source string>)
string(REGEX REPLACE "\\." "/"
       SWIG_JAVA_PACKAGE_PATH ${OPENSIM_JAVA_WRAPPING_PACKAGE})
string(REGEX REPLACE "\\." "-"
       SWIG_JAVA_JAR_NAME ${OPENSIM_JAVA_WRAPPING_PACKAGE})
set(SWIG_JAVA_JAR_NAME "${SWIG_JAVA_JAR_NAME}.jar"
    CACHE INTERNAL
    "Name of the jar file generated by archving SWIG generated Java files.")

set(SWIG_JAVA_SOURCE_BUILD_OUTPUT_DIR
    ${CMAKE_CURRENT_BINARY_DIR}/src/${SWIG_JAVA_PACKAGE_PATH})
set(SWIG_JAVA_JAR_BUILD_OUTPUT_PATH
    "${CMAKE_CURRENT_BINARY_DIR}/src/${SWIG_JAVA_JAR_NAME}")

# We place the .java files in this folder.
execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory
    ${SWIG_JAVA_SOURCE_BUILD_OUTPUT_DIR})

# The actual SWIG command is in the OpenSimJNI folder, since the custom command
# must be defined in the same directory that uses it (for the osimJavaJNI
# target).

# Compile the C++ wrapper into a library.
# ---------------------------------------
add_subdirectory(OpenSimJNI)

# Compile java sources.
# ---------------------
find_package(Java 1.7 REQUIRED)

# To avoid compiling stale .java files, delete any existing files and copy
# over the new files from the module-specific directories (see
# OpenSimJNI/CMakeLists.txt).
add_custom_command(
    OUTPUT "${SWIG_JAVA_JAR_BUILD_OUTPUT_PATH}"
    DEPENDS ${SWIG_JAVA_ACTUATORS_CXX_FILE}
            ${SWIG_JAVA_EXAMPLECOMPONENTS_CXX_FILE}
    COMMAND ${CMAKE_COMMAND} -E remove ${SWIG_JAVA_SOURCE_BUILD_OUTPUT_DIR}/*
    COMMAND ${CMAKE_COMMAND} -E copy_directory
            ${CMAKE_CURRENT_BINARY_DIR}/OpenSimJNI/src/simbody
            ${SWIG_JAVA_SOURCE_BUILD_OUTPUT_DIR}
    COMMAND ${CMAKE_COMMAND} -E copy_directory
            ${CMAKE_CURRENT_BINARY_DIR}/OpenSimJNI/src/common
            ${SWIG_JAVA_SOURCE_BUILD_OUTPUT_DIR}
    COMMAND ${CMAKE_COMMAND} -E copy_directory
            ${CMAKE_CURRENT_BINARY_DIR}/OpenSimJNI/src/simulation
            ${SWIG_JAVA_SOURCE_BUILD_OUTPUT_DIR}
    COMMAND ${CMAKE_COMMAND} -E copy_directory
            ${CMAKE_CURRENT_BINARY_DIR}/OpenSimJNI/src/actuators-analysis-tools
            ${SWIG_JAVA_SOURCE_BUILD_OUTPUT_DIR}
    COMMAND ${CMAKE_COMMAND} -E copy_directory
            ${CMAKE_CURRENT_BINARY_DIR}/OpenSimJNI/src/examplecomponents
            ${SWIG_JAVA_SOURCE_BUILD_OUTPUT_DIR}
    COMMAND ${JAVA_COMPILE} 
            org/opensim/modeling/*.java 
            -source 1.6 -target 1.6
    COMMAND ${JAVA_ARCHIVE} -cvf ${SWIG_JAVA_JAR_NAME}
            org/opensim/modeling/*.class
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/src
    COMMENT "Compiling Java sources and creating jar archive.")

# Umbrella target for assembling the java bindings in the build tree.
# -------------------------------------------------------------------
add_custom_target(JavaBindings ALL
    DEPENDS "${SWIG_JAVA_JAR_BUILD_OUTPUT_PATH}"
    )

add_dependencies(JavaBindings osimJavaJNI)

set_target_properties(JavaBindings PROPERTIES
    PROJECT_LABEL "Java - umbrella target"
    FOLDER "Bindings")

# Install.
# --------
install(FILES "${SWIG_JAVA_JAR_BUILD_OUTPUT_PATH}"
    DESTINATION ${OPENSIM_INSTALL_JAVAJARDIR})
    
if(WIN32)
    # Previously, to configure Matlab with OpenSim, users would
    # need to add OpenSim's bin folder to the Windows PATH, which was
    # somewhat painful.
    # Matlab finds osimJavaJNI via the java.library.path, but
    # osimJavaJNI relies on Windows' dynamic library search
    # behavior (not java.library.path) to find its dependencies:
    # Windows searches the current directory, then the PATH variable.
    # We can avoid having to edit PATH by having Java pre-load the
    # dependencies. The org-opensim-modeling.jar will load the libraries
    # below before trying to load osimJavaJNI. If this pre-loading doesn't
    # work, users can still get Matlab to load OpenSim by editing PATH.
    file(RELATIVE_PATH jar_dir_to_root
        "${CMAKE_INSTALL_PREFIX}/${OPENSIM_INSTALL_JAVAJARDIR}"
        "${CMAKE_INSTALL_PREFIX}")
    set(jar_dir_to_bin_dir "${jar_dir_to_root}${CMAKE_INSTALL_BINDIR}")

    set(JNI_DEP_FILE
        "${CMAKE_CURRENT_BINARY_DIR}/osimJavaJNI_dependencies.txt")
    file(WRITE "${JNI_DEP_FILE}" "")
    # These libraries are in dependency order.
    set(JNI_DEP_LIBS)
    # Handle Visual C++ runtime libraries:
    #   vcruntime (compiler support, proces startup, exception handling)
    #   msvcp (Visual C++ standard library)
    #   concrt (concurrency runtime)
    # CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS is defined by
    # InstallRequiredSystemLibraries in the root CMakeLists.txt.
    # This isn't necessary for all users, as some users
    # will already have these libraries in C:/Windows/System32.
    set(VC_RUNTIME_LIBS)
    foreach(runtime_libpath ${CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS})
        get_filename_component(runtime_libname ${runtime_libpath} NAME_WE)
        list(APPEND VC_RUNTIME_LIBS ${runtime_libname})
        list(APPEND JNI_DEP_LIBS ${runtime_libname})
    endforeach()
    # msvcp depends on vcruntime, so make sure vcruntime appears first.
    foreach(lib ${VC_RUNTIME_LIBS})
        if(${lib} MATCHES "vcruntime")
            list(REMOVE_ITEM JNI_DEP_LIBS ${lib})
            list(INSERT JNI_DEP_LIBS 0 ${lib})
        endif()
    endforeach()

    if(WITH_BTK)
        list(APPEND JNI_DEP_LIBS BTKCommon BTKIO BTKBasicFilters)
    endif()
    list(APPEND JNI_DEP_LIBS
        glut32
        libgcc_s_sjlj-1
        libquadmath-0
        libgfortran-3
        libblas
        liblapack
        SimTKcommon
        SimTKmath
        SimTKsimbody
        osimLepton
        osimCommon
        osimSimulation
        osimActuators
        osimAnalyses
        osimTools
        osimSimmFileWriter
        osimExampleComponents
        )

    foreach(dep ${JNI_DEP_LIBS})
        file(APPEND "${JNI_DEP_FILE}" "${jar_dir_to_bin_dir}/${dep}.dll\n")
    endforeach()
    install(FILES "${JNI_DEP_FILE}" DESTINATION "${OPENSIM_INSTALL_JAVAJARDIR}")
endif()

# Java tests.
# -----------

if(BUILD_TESTING)
    # Now actually add the tests.
    add_subdirectory(tests)
endif()

# MATLAB tests and installing.
# ----------------------------
add_subdirectory(Matlab)
