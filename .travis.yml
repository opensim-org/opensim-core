# This script is used by the Travis-CI (continuous integration) testing
# service to run opensim-core's tests with every GitHub push or pull-request.
# To learn about this file, go to http://docs.travis-ci.com/user/languages/c/
language: cpp

# Use container-based infrastructure to allow caching (for ccache).
sudo: false
    
matrix:
  include:
    - os: linux
      compiler: clang
      env: BTYPE=RelWithDebInfo WRAP=on  DOXY=on  NPROC=1 DEPLOY=yes
    - os: linux
      compiler: gcc
      env: BTYPE=RelWithDebInfo WRAP=off DOXY=off NPROC=3 DEPLOY=no
    - os: linux
      compiler: clang
      env: BTYPE=Debug          WRAP=off DOXY=off NPROC=3 DEPLOY=yes
    - os: osx
      compiler: clang
      env: BTYPE=RelWithDebInfo WRAP=off DOXY=off NPROC=3 DEPLOY=yes

env:
  global:
    # The python tests look for OPENSIM_HOME.
    - OPENSIM_HOME=~/opensim-core
    - OPENSIM_DEPENDENCIES_BUILD_DIR=~/opensim_dependencies-build
    - OPENSIM_DEPENDENCIES_INSTALL_DIR=~/opensim_dependencies-install
    - SWIG_VER=3.0.6
    - PATH="$PATH:$TRAVIS_BUILD_DIR/travis_scripts"
    - secure: "kCMcG2eOIZvD/0o7IQaMlaizdSZNWQbujd6oX/rWJQkCf/BSUIzgJJB8Y0ldE5kC/olKHi0veds4ooem4DFmt+NEJoR7Gnp7I4ZiOOZ77h73tOlPBZWx6t5U6QerO2NC0LFmoa1bVkjlW6vgdR6eq8c8IfVoLWlwI64XKU/96TE="
    - USE_CACHE=true

cache: false

addons:
  # Dependencies on linux.
  apt:
    sources:
      # For gcc >= 4.8
      - ubuntu-toolchain-r-test
      # for clang
      # - llvm-toolchain-precise-3.5
      # For cmake >= 2.8.8 (for CMakePackageConfigHelpers)
      - kubuntu-backports
    packages:
      - cmake
      # For Simbody.
      - liblapack-dev
      - g++-4.9
      - clang-3.5
      # In case someone wants to check for memory leaks.
      - valgrind
      # To build doxygen documentation.
      # TOO OLD; see below. - doxygen
      # To run the python tests.
      - python-nose
      # To send a password to ssh.
      - sshpass

before_install:
  # Temporarily use gcc for every configuration on Travis until LLVM is back up and running.
  # - if [[ "$TRAVIS_OS_NAME" = "linux" && "$CC" = "clang" ]]; then export CC="gcc-4.9"; export CXX="g++-4.9"; fi

  ## Ensure that there are no tabs in source code.
  - cd $TRAVIS_BUILD_DIR
  # GREP returns 0 (true) if there are any matches, and
  # we don't want any matches. If there are matches,
  # print a helpful message, and make the test fail by using "false".
  # The GREP command here checks for any tab characters in the the files
  # that match the specified pattern. GREP does not pick up explicit tabs
  # (e.g., literally a \t in a source file).
  - if grep --line-num --recursive --exclude-dir="*dependencies*" --include={CMakeLists.txt,*.cpp,*.c,*.h} -P "\t" . ; then echo "Tabs found in the lines shown above. See CONTRIBUTING.md about tabs."; false; fi

  ## Set up environment variables.
  # Only if compiling with gcc, update environment variables
  # to use the new gcc.
  - if [ "$CXX" = "g++" ]; then export CXX="g++-4.9" CC="gcc-4.9"; fi
  - if [[ "$TRAVIS_OS_NAME" = "linux" && "$CXX" = "clang++" ]]; then export CXX="clang++-3.5" CC="clang-3.5"; fi
  
  ## Temporary hack to find libblas and liblapack.
  # TODO. Currently Simbody is using Travis CI's Ubuntu 14.04 VMs, which link with 
  # liblapack.so.3 and libblas.so.3. These files don't exist on the 12.04 machines.
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then mkdir ~/lib; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then ln -s /usr/lib/liblapack.so ~/lib/liblapack.so.3; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then ln -s /usr/lib/libblas.so ~/lib/libblas.so.3; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/lib; fi

  ## Doxygen.
  # Need a doxygen that is more recent than that available through apt-get.
  - if [ "$DOXY" = "on" ]; then mkdir ~/doxygen && cd ~/doxygen; fi
  - if [ "$DOXY" = "on" ]; then wget http://ftp.stack.nl/pub/users/dimitri/doxygen-1.8.10.linux.bin.tar.gz; fi
  - if [ "$DOXY" = "on" ]; then tar xzf doxygen-1.8.10.linux.bin.tar.gz; fi

  ## Install Simbody.
  # The Simbody travis script uploads the latestsimbody binaries to bintray.
  - SIMBODYZIP=simbody-latest_${TRAVIS_OS_NAME}_${BTYPE}.zip
  - wget https://dl.bintray.com/chrisdembia/opensim-testing/$SIMBODYZIP
  # Put Simbody in ~/simbody (-q: quiet).
  - unzip -q $SIMBODYZIP -d ~

  ## Install SWIG to build Java/python wrapping.
  - if [[ "$WRAP" = "on" ]]; then if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew install pcre; fi; fi
  - if [[ "$WRAP" = "on" ]]; then mkdir ~/swig-source && cd ~/swig-source; fi
  - if [[ "$WRAP" = "on" ]]; then wget https://github.com/swig/swig/archive/rel-$SWIG_VER.tar.gz; fi
  #- wget http://prdownloads.sourceforge.net/swig/$SWIG.tar.gz
  - if [[ "$WRAP" = "on" ]]; then tar xzf rel-$SWIG_VER.tar.gz && cd swig-rel-$SWIG_VER; fi
  - if [[ "$WRAP" = "on" ]]; then sh autogen.sh && ./configure --prefix=$HOME/swig --disable-ccache && make && make -j8 install; fi
  #- ./configure --prefix=$HOME/swig && make && make -j8 install

  ## Detect if we should check memory leaks with valgrind.
  - cd $TRAVIS_BUILD_DIR
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then git log --format=%B --no-merges -n 1 | grep '\[ci valgrind\]'; export RUN_VALGRIND=$?; true; fi
  - if [ $RUN_VALGRIND = "0" ]; then export CTEST_FLAGS="-D ExperimentalMemCheck"; fi
  
  ## Decide which tests to exclude.
  # Initialize environment variable.
  - export TESTS_TO_EXCLUDE="unmatched" # This is just for the regex.
  ## On OSX, we know that testInitState fails; exclude it.
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then export TESTS_TO_EXCLUDE="$TESTS_TO_EXCLUDE|testInitState"; fi
  ## If we are building in debug, there are some tests to ignore.
  - if [ "$BTYPE" = "Debug" ]; then export TESTS_TO_EXCLUDE="$TESTS_TO_EXCLUDE|testCMC|testOptimizationExample|testWrapping"; fi
  
  ## Set compiler flags.
  - export CXX_FLAGS="-Werror"
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then export CXX_FLAGS="$CXX_FLAGS -Wno-tautological-undefined-compare -Wno-undefined-bool-conversion"; fi;

  # Run superbuild to download, configure, build and install dependencies.
  - mkdir $OPENSIM_DEPENDENCIES_BUILD_DIR
  - cd $OPENSIM_DEPENDENCIES_BUILD_DIR
  - cmake $TRAVIS_BUILD_DIR/dependencies -DCMAKE_INSTALL_PREFIX=$OPENSIM_DEPENDENCIES_INSTALL_DIR -DCMAKE_BUILD_TYPE=$BTYPE -DSUPERBUILD_simbody=OFF
  #######################################################################################################################
  # Download the cached build directory, if one exists.
  #######################################################################################################################
  - BTK_SOURCE_DIR="${TRAVIS_BUILD_DIR}/dependencies/BTK"
  - BTK_BUILD_DIR="${OPENSIM_DEPENDENCIES_BUILD_DIR}/BTK"
  - source DownloadDepBuildFromCache.sh BTKCore $BTK_SOURCE_DIR $BTK_BUILD_DIR

  - make -j8
  
  #######################################################################################################################
  # Cache BTK build directory.
  #######################################################################################################################
  - source UploadBuildToCache.sh BTKCore $BTK_SOURCE_DIR $BTK_BUILD_DIR
  
  # Force some cleanup of homebrew cache so we do not exceed availabe disk space
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew cleanup; rm -rf "`brew cache`"; fi
  

install:
  #######################################################################################################################
  # Download the cached build directory, if one exists.
  #######################################################################################################################
  - source DownloadBuildFromCache.sh opensim-core $TRAVIS_BUILD_DIR ~/opensim-core-build

  #######################################################################################################################
  # Configure OpenSim.
  #######################################################################################################################
  - cd ~/opensim-core-build
  - cmake $TRAVIS_BUILD_DIR -DBUILD_JAVA_WRAPPING=$WRAP -DBUILD_PYTHON_WRAPPING=$WRAP -DSWIG_EXECUTABLE=$HOME/swig/bin/swig -DSIMBODY_HOME=~/simbody -DOPENSIM_DEPENDENCIES_DIR=$OPENSIM_DEPENDENCIES_INSTALL_DIR -DCMAKE_INSTALL_PREFIX=$OPENSIM_HOME -DCMAKE_BUILD_TYPE=$BTYPE -DCMAKE_CXX_FLAGS="$CXX_FLAGS" -DDOXYGEN_EXECUTABLE=$HOME/doxygen/doxygen-1.8.10/bin/doxygen -DOPENSIM_DOXYGEN_USE_MATHJAX=off -DOPENSIM_SIMBODY_DOXYGEN_LOCATION="https://simtk.org/api_docs/simbody/latest/" -DWITH_BTK:BOOL=ON

  #######################################################################################################################
  # Build OpenSim.
  #######################################################################################################################
  - BUILD_START_TIMESTAMP=$(date +%s)
  # Build java and python C++ wrapper separately to avoid going over the memory limit.
  - if [[ "$WRAP" = "on" ]]; then make -j$NPROC osimTools osimJavaJNI PythonBindings; fi
  # Build whatever remains (at least _opensim, tests and examples).
  - make -j$NPROC;

  #######################################################################################################################
  # Cache OpenSim build directory if current branch is master.
  #######################################################################################################################
  - source UploadBuildToCache.sh opensim-core $TRAVIS_BUILD_DIR ~/opensim-core-build
  - cd ~/opensim-core-build

script:
  #######################################################################################################################
  # Find tests to exclude. Add them to TESTS_TO_EXCLUDE.
  #######################################################################################################################
  - source FindTestsToExclude.sh

  # Test OpenSim.
  # TODO On Debug, we need to tell travis not to timeout if it doesn't get
  # any output for more than 10 minutes. We do this using "travis_wait".
  #- if [ "$BTYPE" = "Debug" ]; export NO_TIMEOUT="travis_wait"; fi
  - export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:~/opensim-core-build"
  - ctest -j8 --output-on-failure $CTEST_FLAGS --exclude-regex $TESTS_TO_EXCLUDE

  ## Print out valgrind output.
  - if [ $RUN_VALGRIND ]; then find Testing/Temporary -name "MemoryCheck*" -print | xargs cat; fi

  ## Build doxygen documentation.
  - if [ "$DOXY" = "on" ]; then make doxygen; fi
  
  ## Install OpenSim. Suppress output.
  - make -j8 install > /dev/null

  ## Test python wrapping.
  # Add OpenSim libraries to library path.
  - if [ "$WRAP" = "on" ]; then export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OPENSIM_HOME/lib/x86_64-linux-gnu:$OPENSIM_DEPENDENCIES_INSTALL_DIR/BTK/lib/btk-0.4dev; fi
  # Go to the python wrapping package directory.
  - if [ "$WRAP" = "on" ]; then cd $OPENSIM_HOME/lib/python2.7/site-packages; fi
  # Run the python tests, verbosely.
  - if [ "$WRAP" = "on" ]; then nosetests -v; fi
    
  ## Upload doxygen to server for viewing.
  # View resulting doxygen at myosin.sourceforge.net/<pull-request-number>
  # The `-e "ssh...` is for providing the password andautomatically
  # accepting the ssh key.
  # https://sourceforge.net/p/forge/documentation/Project%20Web%20Services/
  # MYOSIN_SOURCEFORGE_PASSWORD is a hidden environment variable that we set
  # at https://travis-ci.org/opensim-org/opensim-core/settings.
  - if [ "$DOXY" = "on" ]; then if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then rsync -az -e "sshpass -p rectusfemoris ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" $OPENSIM_HOME/share/doc/OpenSim/html_developer/ opensim-bot@web.sourceforge.net:/home/project-web/myosin/htdocs/$TRAVIS_PULL_REQUEST; fi; fi
  # If we're uploading doxygen, we also want to delete old
  # doxygen files from the server so they don't build up indefinitely.
  # However, ssh'ing into the server takes a while, so we only do this
  # randomly (1% of the time).
  - if [[ "$DOXY" = "on" && "$TRAVIS_PULL_REQUEST" != "false" && $(python -c "import random; print(random.random() < 0.01)") = "True" ]]; then CLEAN_UP_MYOSIN=0; else CLEAN_UP_MYOSIN=1; fi
  - if [ $CLEAN_UP_MYOSIN = "0" ]; then echo "This build is randomly selected to delete old folders from myosin.sourceforge.net."; fi
  # Creates an environment at sourceforge that we can ssh into.
  - if [ $CLEAN_UP_MYOSIN = "0" ]; then sshpass -p rectusfemoris ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null opensim-bot,myosin@shell.sourceforge.net create; fi
  # Now that the environment is created, we can run a command on the server.
  # mindepth and maxdepth makes sure that we only look to delete folders
  # in the htdocs folder, and we don't look at subdirectories.
  # We only look for folders (`-type d`).
  # We delete folders older than 30 days (`-mtime +30`).
  # The "shutdown" command shuts down the ssh environment.
  - if [ $CLEAN_UP_MYOSIN = "0" ]; then sshpass -p rectusfemoris ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null opensim-bot,myosin@shell.sourceforge.net 'cd /home/project-web/myosin/htdocs && find . -mindepth 1 -maxdepth 1 -type d -mtime +30 | xargs rm -rf && shutdown'; fi
  
before_deploy:
  # Zip up the installation using a file name that identifies where
  # the binaries were built.
  - mkdir ~/binstar-packages
  - ZIPNAME=opensim-core-latest_${TRAVIS_OS_NAME}_${BTYPE}.zip
  - # Zip up opensim relative to where it's installed.
  - cd $OPENSIM_HOME/../
  - zip --recurse-paths --quiet ~/binstar-packages/$ZIPNAME opensim-core

  # Paths in the .bintray.json file are relative to the current directory.
  - cd ~

deploy:
  # Uploads to https://bintray.com/chrisdembia/opensim-testing/opensim-core/view
  #            https://dl.bintray.com/chrisdembia/opensim-testing/
  # See http://docs.travis-ci.com/user/deployment/bintray/ for help.
  provider: bintray
  file: $TRAVIS_BUILD_DIR/doc/.bintray.json
  user: chrisdembia
  skip_cleanup: true
  # API key is encrypted with travis.
  key: $BINTRAY_API_KEY
  on:
    branch: master
    # Upload for both linux (once) and OSX. Might need to modify the condition
    # if we change the build matrix.
    condition: "$DEPLOY = yes"
