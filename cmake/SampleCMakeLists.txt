# Generic CMakeLists.txt for making an OpenSim-using executable.
# This shows how to use the provided OpenSimConfig.cmake to locate an OpenSim
# installation on your machine so you can use it from your own code.
# You will most likely want to copy some of these lines into your own
# CMakeLists.txt rather than use this one verbatim.

cmake_minimum_required(VERSION 2.8.6)
project(myexe)

# List your source and header files here.
set(my_source_files myexe.cpp)
set(my_header_files myexe.h)

# OpenSim uses C++11 language features.
if("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU" OR
        "${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
    # Using C++11 on OSX requires using libc++ instead of libstd++.
    # libc++ is an implementation of the C++ standard library for OSX.
    if(APPLE)
        if(XCODE)
            set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD "c++11")
            set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY "libc++")
        else()
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
            if(${CMAKE_CXX_COMPILER_ID} MATCHES "Clang")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
            endif()
        endif()
    else()
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
    endif()
endif()

# This depends on OpenSimConfig.cmake being located somewhere predictable
# on your machine. If you have installed it somewhere that CMake won't be
# able to guess, you'll need to tell find_package where to look (with the PATHS
or HINTS parameters), or # specify the installation directory in the
CMAKE_PREFIX_PATH variable.
find_package(OpenSim REQUIRED)

include_directories(${OpenSim_INCLUDE_DIRS})

add_executable(myexe ${my_source_files} ${my_header_files})
target_link_libraries(myexe ${OpenSim_LIBRARIES})
